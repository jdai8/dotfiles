let mapleader = "\<Space>"

" dotvim is ~/.vim on unix, ~/vimfiles on windows or cygwin
let dotvim = expand("~/.vim")
if has("win64") || has("win32") || has("win32unix")
    let dotvim = expand("~/vimfiles")
endif

" plugins and colorschemes
if isdirectory("/usr/local/opt/fzf")
    set runtimepath+=/usr/local/opt/fzf
endif

syntax enable
" let &bg = (strftime("%H") >= 5 && strftime("%H") < 18) ? "light" : "dark"
set bg=light
colorscheme solarized

" search through oldfiles, taken from https://github.com/romainl/vim-tinyMRU/
function! OldfilesComplete(substr, cmdLine, cursor)
    " throw away files I never saved
    let files = filter(copy(v:oldfiles), 'filereadable(expand(v:val))')
    return map(filter(files, 'v:val =~ a:substr'), 'fnamemodify(v:val, ":.")')
endfunction

function! OpenOldFile(file)
    let match = a:file
    if !filereadable(expand(a:file))
        let matches = OldfilesComplete(a:file, 0, 0)
        if empty(matches)
            echo "no matches"
            return
        endif
        let match = matches[0]
    endif

    execute "edit " . match
endfunction

command! -nargs=1 -complete=customlist,OldfilesComplete Old
            \ call OpenOldFile(fnameescape(<f-args>))

nnoremap <leader>m :e $MYVIMRC<CR>
nnoremap <leader>f :Old<space>

" highlight when over 80 columns
function! ToggleLongLines()
    let g:longlines = !g:longlines
    if g:longlines
        highlight link OverLength ErrorMsg
        match OverLength /\%81v.\+/
    else
        highlight link OverLength NONE
    endif
endfunction
command! ToggleLongLines call ToggleLongLines()
let g:longlines = 0

filetype plugin indent on

" don't auto-add a comment when I press o or O
autocmd FileType * setlocal formatoptions-=o

" may have to adjust this per terminal (map ctrl-backspace to delete words)
inoremap  

cnoreabbrev H vert h

" Leader mappings
nnoremap <leader><tab> <C-^>
nnoremap <leader>e :ls<CR>:b<space>

command! C call system('clip.exe', @+)

for c in ["p", "P", "y", "Y"]
    execute 'nnoremap <leader>' . c . ' "+' . c
    execute 'vnoremap <leader>' . c . ' "+' . c
endfor

for d in ["h", "j", "k", "l"]
    execute 'nnoremap <leader>' . d . ' <C-w>' . d
endfor

nnoremap <backspace> <C-U>
nnoremap <enter> <C-D>

nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap q: :q<CR>

" used for spacing with blank lines
nnoremap <leader>o o<Esc>k
nnoremap <leader>i O<Esc>j

nnoremap <expr> k (v:count > 5 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : '') . 'j'

function! CleanUpWhitespace()
    normal mz
    :%s/\s\+$//e
    :%s/\n\{3,}/\r\r/e
    normal `z
endfunction
command! CleanUpWhitespace call CleanUpWhitespace()

command! Cwd cd %:h

" don't make .netrwhist files
let g:netrw_dirhistmax = 0

set undofile
let &undodir = dotvim . "/undo"
let &backupdir = dotvim . "/backup"

" tab settings
set expandtab     " converts tabs to spaces
set softtabstop=4 " press tab key = insert 4 cols
set tabstop=4     " display a \t as 4 spaces
set shiftwidth=4  " what to use for << and >>, and autoindent
set shiftround    " rounds << and >>

autocmd FileType javascript set shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html       set shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css        set shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType elm        set shiftwidth=2 tabstop=2 softtabstop=2

" set mouse = ""

noremap Y y$

nnoremap <silent> <c-l> :noh<CR>

augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

set timeoutlen=500 " wait half a second for mappings
set ttimeoutlen=0  " dont wait on key codes

set scrolloff=3
set autoindent
set laststatus=2
set confirm
set number
set relativenumber
set wildmenu
set wildmode=longest,full
set wildignorecase
set ignorecase
set smartcase
set novisualbell
set backspace=indent,eol,start
set incsearch
set hlsearch
set autoread
set showcmd
set noruler
set hidden
